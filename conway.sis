%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SISAL implementation of John Conway's Game of Life
%
% Compile with 'sisalc conway.sis -o conway'
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
define Main

function Compute(G: array[array[integer]]; I, J: integer; returns integer)
    let
        Total := G[I-1,J-1] + G[I-1,J] + G[I-1,J+1] +
                 G[I,J-1]        +       G[I,J+1]   +
                 G[I+1,J-1] + G[I+1,J] + G[I+1,J+1];
    in
        if     (G[I, J] = 1 & Total > 5)  then 0
        elseif (G[I, J] = 0 & Total ~= 3) then 1
        else G[I, J] end if
    end let
end function

function DoWork(G: array[array[integer]]; Rows, Columns: integer returns array[array[integer]])
    let
        First := for i in 0, Columns + 1 returns array of G[0, i] end for;
        Last  := for i in 0, Columns + 1
                 returns array of G[Rows + 1, i]
                 end for;
        Core  := for I in 1, Rows
                     Mid := for J in 1, Columns
                            returns array of Compute(G, I, J)
                            end for;
                     Row := array_addl(Mid, G[I,0]);
                 returns array of array_addh(Row, G[I, Columns + 1])
                 end for;
    in
        array_addl(array_addh(Core,Last),First)
    end let
end function

function Main(Iterations, Rows, Columns: integer; Gin: array[array[integer]]
              returns array[array[integer]], array[array[integer]])
    Gin, for initial
        Count := Iterations;
        G     := Gin;
    while (Count > 0) repeat
        Count := old Count - 1;
        G     := DoWork(old G, Rows, Columns);
    returns value of G
    end for
end function
